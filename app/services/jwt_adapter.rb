# frozen_string_literal: true

require "jwt"

# Adapter to JWT gem
class JwtAdapter
  ALGORITHM = "HS256"
  KEY = Rails.application.credentials.secret_key_base

  class << self
    # @param opts [Hash]
    # @option opts [Integer] :iat Issued at (number of seconds since the Epoch)
    # @option opts [Integer] :nbf Not Before Time (number of seconds since the Epoch)
    # @option opts [Integer] :exp Expire date (default 1 hour)
    # @return [String] jwt
    def create_auth_token(user_id, opts = {})
      now = Time.now.utc
      payload = {
        iat: opts[:iat] || now.to_i,
        nbf: opts[:nbf] || now.to_i,
        exp: opts[:exp] || 1.hour.since(now).to_i,
        sub: user_id
      }
      encode(payload)
    end

    # @param payload [Hash]
    # @return [String] jwt
    def encode(payload)
      JWT.encode(payload, KEY, ALGORITHM, { typ: "JWT" })
    end

    # @param token [String] JWT token generated by this class
    # @return [Hash<Symbol>] payload data
    def decode(token)
      JWT.decode(token, KEY, true, { algorithm: ALGORITHM }).first.transform_keys(&:to_sym)
    end
  end
end
